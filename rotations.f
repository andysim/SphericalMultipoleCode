  subroutine mp_rot_lab(natom)
    !
    integer, intent(in) :: natom ! the number of real (non-image) atoms
    !
    integer :: atom_a, lmax
    real*8, dimension(9) :: d1
    real*8, dimension(25) :: d2
    real*8, dimension(49) :: d3
    real*8, dimension(81) :: d4

    do atom_a=1,natom
      lmax = 4  ! this should be compute for each pair, based on the force field and the l-dependent cutoffs
      if (lmax .lt. 0) cycle
      ! L = 0
      ! In our code, mp_lab_Q and mp_body_Q are (25*natom) matrices that cache the lab- and body-fixed multipoles, respectively
      mp_lab_Q(1, atom_a) = mp_body_Q(1, atom_a)
      if (lmax .lt. 1) cycle
      ! L = 1
      ! remap from cartesian to spherical
      ! the mp_U matrix holds the local rotation array for each body-fixed multipole
      d1(5) = mp_U(1,atom_a)
      d1(8) = mp_U(4,atom_a)
      d1(2) = mp_U(7,atom_a)
      d1(6) = mp_U(2,atom_a)
      d1(9) = mp_U(5,atom_a)
      d1(3) = mp_U(8,atom_a)
      d1(4) = mp_U(3,atom_a)
      d1(7) = mp_U(6,atom_a)
      d1(1) = mp_U(9,atom_a)
      !
      ! The matrix-vector products are too small to efficiently handle with BLAS.
      ! It's better to write the loops explicitly and let the compiler unroll them.
      ! This is really important when dealing with the O(N^2) rotations to the QI
      ! frame, because that's a bottleneck.  We just provide the BLAS code here for
      ! compact representation of the operations that are needed.
      !
      call DGEMV('n', 3, 3, 1d0, d1, 3, mp_body_Q(2,atom_a), 1, 0d0, mp_lab_Q(2, atom_a), 1)
      if (lmax .lt. 2) cycle
      !
      call mp_rot_form_d(lmax, d1, d2, d3, d4)
      ! L = 2
      call DGEMV('n', 5, 5, 1d0, d2, 5, mp_body_Q(5,atom_a), 1, 0d0, mp_lab_Q(5, atom_a), 1)
      if (lmax .lt. 3) cycle
      ! L = 3
      call DGEMV('n', 7, 7, 1d0, d3, 7, mp_body_Q(10,atom_a), 1, 0d0, mp_lab_Q(10, atom_a), 1)
      if (lmax .lt. 4) cycle
      ! L = 4
      call DGEMV('n', 9, 9, 1d0, d4, 9, mp_body_Q(17,atom_a), 1, 0d0, mp_lab_Q(17, atom_a), 1)
      ! other...
      !DEBUGPRINT
      write(*,*)
      write(*,*) "====================================================================================================================================="
      write(*,*) "Performing rotation to the lab frame for atom", atom_a
      write(*,*) "Body-fixed multipoles:-"
      write(*,'(A15(1F16.10))') "Charge:", mp_body_Q(1, atom_a)
      write(*,'(A15(3F16.10))') "Dipoles:", mp_body_Q(2:4, atom_a)
      write(*,'(A15(5F16.10))') "Quadrupoles:", mp_body_Q(5:9, atom_a)
      write(*,'(A15(7F16.10))') "Octopoles:", mp_body_Q(10:16, atom_a)
      write(*,'(A15(9F16.10))') "Hexadecapoles:", mp_body_Q(17:25, atom_a)
      write(*,*)
      write(*,*) "The local orientation matrix, U"
      write(*,'(3F16.10)') mp_U(1, atom_a), mp_U(4, atom_a), mp_U(7, atom_a)
      write(*,'(3F16.10)') mp_U(2, atom_a), mp_U(5, atom_a), mp_U(7, atom_a)
      write(*,'(3F16.10)') mp_U(3, atom_a), mp_U(6, atom_a), mp_U(7, atom_a)
      write(*,*)
      write(*,*)
      write(*,*) "The D1 rotation matrix for dipoles (U, reordered for spherical harmonics)"
      write(*,'(3F16.10)') d1(1), d1(4), d1(7)
      write(*,'(3F16.10)') d1(2), d1(5), d1(7)
      write(*,'(3F16.10)') d1(3), d1(6), d1(7)
      write(*,*)
      write(*,*)
      write(*,*) "The D2 rotation matrix for quadrupoles"
      write(*,'(5F16.10)') d2(1), d2(6), d2(11), d2(16), d2(21)
      write(*,'(5F16.10)') d2(2), d2(7), d2(12), d2(17), d2(22)
      write(*,'(5F16.10)') d2(3), d2(8), d2(13), d2(18), d2(23)
      write(*,'(5F16.10)') d2(4), d2(9), d2(14), d2(19), d2(24)
      write(*,'(5F16.10)') d2(5), d2(10), d2(15), d2(20), d2(25)
      write(*,*)
      write(*,*)
      write(*,*) "The D3 rotation matrix for octopoles"
      write(*,'(7F16.10)') d3(1), d3(8), d3(15), d3(22), d3(29), d3(36), d3(43)
      write(*,'(7F16.10)') d3(2), d3(9), d3(16), d3(23), d3(30), d3(37), d3(44)
      write(*,'(7F16.10)') d3(3), d3(10), d3(17), d3(24), d3(31), d3(38), d3(45)
      write(*,'(7F16.10)') d3(4), d3(11), d3(18), d3(25), d3(32), d3(39), d3(46)
      write(*,'(7F16.10)') d3(5), d3(12), d3(19), d3(26), d3(33), d3(40), d3(47)
      write(*,'(7F16.10)') d3(6), d3(13), d3(20), d3(27), d3(34), d3(41), d3(48)
      write(*,'(7F16.10)') d3(7), d3(14), d3(21), d3(28), d3(35), d3(42), d3(49)
      write(*,*)
      write(*,*)
      write(*,*) "The D4 rotation matrix for hexadecapoles"
      write(*,'(9F16.10)') d4(1), d4(10), d4(19), d4(28), d4(37), d4(46), d4(55), d4(64), d4(73)
      write(*,'(9F16.10)') d4(2), d4(11), d4(20), d4(29), d4(38), d4(47), d4(56), d4(65), d4(74)
      write(*,'(9F16.10)') d4(3), d4(12), d4(21), d4(30), d4(39), d4(48), d4(57), d4(66), d4(75)
      write(*,'(9F16.10)') d4(4), d4(13), d4(22), d4(31), d4(40), d4(49), d4(58), d4(67), d4(76)
      write(*,'(9F16.10)') d4(5), d4(14), d4(23), d4(32), d4(41), d4(50), d4(59), d4(68), d4(77)
      write(*,'(9F16.10)') d4(6), d4(15), d4(24), d4(33), d4(42), d4(51), d4(60), d4(69), d4(78)
      write(*,'(9F16.10)') d4(7), d4(16), d4(25), d4(34), d4(43), d4(52), d4(61), d4(70), d4(79)
      write(*,'(9F16.10)') d4(8), d4(17), d4(26), d4(35), d4(44), d4(53), d4(62), d4(71), d4(80)
      write(*,'(9F16.10)') d4(9), d4(18), d4(27), d4(36), d4(45), d4(54), d4(63), d4(72), d4(81)
      write(*,*)
      write(*,*)
      write(*,*) "Lab-fixed multipoles:-"
      write(*,'(A15(1F16.10))') "Charge:", mp_lab_Q(1, atom_a)
      write(*,'(A15(3F16.10))') "Dipoles:", mp_lab_Q(2:4, atom_a)
      write(*,'(A15(5F16.10))') "Quadrupoles:", mp_lab_Q(5:9, atom_a)
      write(*,'(A15(7F16.10))') "Octopoles:", mp_lab_Q(10:16, atom_a)
      write(*,'(A15(9F16.10))') "Hexadecapoles:", mp_lab_Q(17:25, atom_a)
      write(*,*) "====================================================================================================================================="
      write(*,*)
    enddo ! atom_a
    return
  end subroutine mp_rot_lab


  subroutine mp_rot_form_d(lmax, d1, d2, d3, d4)
    integer, intent(in) :: lmax
    real*8, dimension(9), intent(in) :: d1
    real*8, dimension(25), intent(out) :: d2
    real*8, dimension(49), intent(out) :: d3
    real*8, dimension(81), intent(out) :: d4
    integer kk
    !
    if (lmax .lt. 2) return
    ! d2
    d2(1) = 0.5d0*(-1.d0 + 3.d0*d1(1)*d1(1))
    d2(2) = 1.732050807568877d0*d1(1)*d1(2)
    d2(3) = 1.732050807568877d0*d1(1)*d1(3)
    d2(4) = 0.8660254037844386d0*(d1(2)*d1(2) - d1(3)*d1(3))
    d2(5) = 1.732050807568877d0*d1(2)*d1(3)
    d2(6) = 1.732050807568877d0*d1(1)*d1(4)
    d2(7) = d1(2)*d1(4) + d1(1)*d1(5)
    d2(8) = d1(3)*d1(4) + d1(1)*d1(6)
    d2(9) = d1(2)*d1(5) - d1(3)*d1(6)
    d2(10) = d1(3)*d1(5) + d1(2)*d1(6)
    d2(11) = 1.732050807568877d0*d1(1)*d1(7)
    d2(12) = d1(2)*d1(7) + d1(1)*d1(8)
    d2(13) = d1(3)*d1(7) + d1(1)*d1(9)
    d2(14) = d1(2)*d1(8) - d1(3)*d1(9)
    d2(15) = d1(3)*d1(8) + d1(2)*d1(9)
    d2(16) = 0.8660254037844386d0*(d1(4)*d1(4) - d1(7)*d1(7))
    d2(17) = d1(4)*d1(5) - d1(7)*d1(8)
    d2(18) = d1(4)*d1(6) - d1(7)*d1(9)
    d2(19) = 0.5d0*(d1(5)*d1(5) - d1(6)*d1(6) - d1(8)*d1(8) + d1(9)*d1(9))
    d2(20) = d1(5)*d1(6) - d1(8)*d1(9)
    d2(21) = 1.732050807568877d0*d1(4)*d1(7)
    d2(22) = d1(5)*d1(7) + d1(4)*d1(8)
    d2(23) = d1(6)*d1(7) + d1(4)*d1(9)
    d2(24) = d1(5)*d1(8) - d1(6)*d1(9)
    d2(25) = d1(6)*d1(8) + d1(5)*d1(9)
    !
    if (lmax .lt. 3) return
    ! d3
    d3(1) = d1(1)*d2(1) - 0.5773502691896258d0*(d1(7)*d2(11) + d1(4)*d2(6))
    d3(2) = 0.3535533905932738d0*(3.d0*d1(1)*d2(2) - 1.732050807568877d0*(d1(7)*d2(12) + d1(4)*d2(7)))
    d3(3) = 0.3535533905932738d0*(3.d0*d1(1)*d2(3) - 1.732050807568877d0*(d1(7)*d2(13) + d1(4)*d2(8)))
    d3(4) = 0.4472135954999579d0*(3.d0*d1(1)*d2(4) - 1.732050807568877d0*(d1(7)*d2(14) + d1(4)*d2(9)))
    d3(5) = 0.4472135954999579d0*(-1.732050807568877d0*(d1(4)*d2(10) + d1(7)*d2(15)) + 3.d0*d1(1)*d2(5))
    d3(6) = 0.3162277660168379d0*(d1(6)*d2(10) - d1(8)*d2(14) + d1(9)*d2(15) + 1.732050807568877d0*(d1(2)*&
       d2(4) - d1(3)*d2(5)) - d1(5)*d2(9))
    d3(7) = 0.5477225575051661d0*(d1(3)*d2(4) + d1(2)*d2(5)) - 0.3162277660168379d0*(d1(5)*d2(10) + d1(9)*&
       d2(14) + d1(8)*d2(15) + d1(6)*d2(9))
    d3(8) = 0.2357022603955158d0*(3.464101615137755d0*d1(4)*d2(1) - d1(4)*d2(16) - d1(7)*d2(21) + 4.d0*&
       d1(1)*d2(6))
    d3(9) = 0.25d0*(-d1(4)*d2(17) + 3.464101615137755d0*d1(4)*d2(2) - d1(7)*d2(22) + 4.d0*d1(1)*d2(7))
    d3(10) = 0.25d0*(-d1(4)*d2(18) - d1(7)*d2(23) + 3.464101615137755d0*d1(4)*d2(3) + 4.d0*d1(1)*d2(8))
    d3(11) = -0.3162277660168379d0*(d1(7)*d2(24) + d1(4)*(d2(19) - 3.464101615137755d0*d2(4)) - 4.d0*d1(1)*&
       d2(9))
    d3(12) = 0.3162277660168379d0*(4.d0*d1(1)*d2(10) - d1(4)*d2(20) - d1(7)*d2(25) + 3.464101615137755d0*&
       d1(4)*d2(5))
    d3(13) = 0.07453559924999299d0*(1.732050807568877d0*(-d1(5)*d2(19) + d1(6)*d2(20) - d1(8)*d2(24) +&
        d1(9)*d2(25)) + 6.d0*d1(5)*d2(4) - 6.d0*d1(6)*d2(5) + 6.928203230275509d0*(-d1(3)*d2(10) + d1(2)*d2(9)))
    d3(14) = 0.07453559924999299d0*(-1.732050807568877d0*(d1(6)*d2(19) + d1(5)*d2(20) + d1(9)*d2(24) +&
        d1(8)*d2(25)) + 6.d0*(d1(6)*d2(4) + d1(5)*d2(5)) + 6.928203230275509d0*(d1(2)*d2(10) + d1(3)*d2(9)))
    d3(15) = 0.2357022603955158d0*(4.d0*d1(1)*d2(11) + d1(7)*(3.464101615137755d0*d2(1) + d2(16)) - d1(4)*&
       d2(21))
    d3(16) = 0.25d0*(4.d0*d1(1)*d2(12) + d1(7)*(d2(17) + 3.464101615137755d0*d2(2)) - d1(4)*d2(22))
    d3(17) = 0.25d0*(4.d0*d1(1)*d2(13) - d1(4)*d2(23) + d1(7)*(d2(18) + 3.464101615137755d0*d2(3)))
    d3(18) = 0.3162277660168379d0*(4.d0*d1(1)*d2(14) - d1(4)*d2(24) + d1(7)*(d2(19) + 3.464101615137755d0*&
       d2(4)))
    d3(19) = 0.3162277660168379d0*(4.d0*d1(1)*d2(15) - d1(4)*d2(25) + d1(7)*(d2(20) + 3.464101615137755d0*&
       d2(5)))
    d3(20) = 0.07453559924999299d0*(6.928203230275509d0*(d1(2)*d2(14) - d1(3)*d2(15)) + 1.732050807568877d0*&
       (d1(8)*d2(19) - d1(9)*d2(20) - d1(5)*d2(24) + d1(6)*d2(25)) + 6.d0*d1(8)*d2(4) - 6.d0*d1(9)*d2(5))
    d3(21) = 0.07453559924999299d0*(6.928203230275509d0*(d1(3)*d2(14) + d1(2)*d2(15)) + 1.732050807568877d0*&
       (d1(9)*d2(19) + d1(8)*d2(20) - d1(6)*d2(24) - d1(5)*d2(25)) + 6.d0*(d1(9)*d2(4) + d1(8)*d2(5)))
    d3(22) = 0.7453559924999299d0*(-d1(7)*d2(11) + d1(1)*d2(16) + d1(4)*d2(6))
    d3(23) = 0.7905694150420948d0*(-d1(7)*d2(12) + d1(1)*d2(17) + d1(4)*d2(7))
    d3(24) = 0.7905694150420948d0*(-d1(7)*d2(13) + d1(1)*d2(18) + d1(4)*d2(8))
    d3(25) = -d1(7)*d2(14) + d1(1)*d2(19) + d1(4)*d2(9)
    d3(26) = d1(4)*d2(10) - d1(7)*d2(15) + d1(1)*d2(20)
    d3(27) = 0.408248290463863d0*(-d1(6)*d2(10) - d1(8)*d2(14) + d1(9)*d2(15) + d1(2)*d2(19) - d1(3)*&
       d2(20) + d1(5)*d2(9))
    d3(28) = 0.408248290463863d0*(d1(5)*d2(10) - d1(9)*d2(14) - d1(8)*d2(15) + d1(3)*d2(19) + d1(2)*&
       d2(20) + d1(6)*d2(9))
    d3(29) = 0.7453559924999299d0*(d1(4)*d2(11) + d1(1)*d2(21) + d1(7)*d2(6))
    d3(30) = 0.7905694150420948d0*(d1(4)*d2(12) + d1(1)*d2(22) + d1(7)*d2(7))
    d3(31) = 0.7905694150420948d0*(d1(4)*d2(13) + d1(1)*d2(23) + d1(7)*d2(8))
    d3(32) = d1(4)*d2(14) + d1(1)*d2(24) + d1(7)*d2(9)
    d3(33) = d1(7)*d2(10) + d1(4)*d2(15) + d1(1)*d2(25)
    d3(34) = 0.408248290463863d0*(-d1(9)*d2(10) + d1(5)*d2(14) - d1(6)*d2(15) + d1(2)*d2(24) - d1(3)*&
       d2(25) + d1(8)*d2(9))
    d3(35) = 0.408248290463863d0*(d1(8)*d2(10) + d1(6)*d2(14) + d1(5)*d2(15) + d1(3)*d2(24) + d1(2)*&
       d2(25) + d1(9)*d2(9))
    d3(36) = 0.9128709291752769d0*(d1(4)*d2(16) - d1(7)*d2(21))
    d3(37) = 0.9682458365518542d0*(d1(4)*d2(17) - d1(7)*d2(22))
    d3(38) = 0.9682458365518542d0*(d1(4)*d2(18) - d1(7)*d2(23))
    d3(39) = 1.224744871391589d0*(d1(4)*d2(19) - d1(7)*d2(24))
    d3(40) = 1.224744871391589d0*(d1(4)*d2(20) - d1(7)*d2(25))
    d3(41) = 0.5d0*(d1(5)*d2(19) - d1(6)*d2(20) - d1(8)*d2(24) + d1(9)*d2(25))
    d3(42) = 0.5d0*(d1(6)*d2(19) + d1(5)*d2(20) - d1(9)*d2(24) - d1(8)*d2(25))
    d3(43) = 0.9128709291752769d0*(d1(7)*d2(16) + d1(4)*d2(21))
    d3(44) = 0.9682458365518542d0*(d1(7)*d2(17) + d1(4)*d2(22))
    d3(45) = 0.9682458365518542d0*(d1(7)*d2(18) + d1(4)*d2(23))
    d3(46) = 1.224744871391589d0*(d1(7)*d2(19) + d1(4)*d2(24))
    d3(47) = 1.224744871391589d0*(d1(7)*d2(20) + d1(4)*d2(25))
    d3(48) = 0.5d0*(d1(8)*d2(19) - d1(9)*d2(20) + d1(5)*d2(24) - d1(6)*d2(25))
    d3(49) = 0.5d0*(d1(9)*d2(19) + d1(8)*d2(20) + d1(6)*d2(24) + d1(5)*d2(25))

    if (lmax .lt. 4) return
    ! d4
    d4(1) = d1(1)*d3(1) - 0.6123724356957945d0*(d1(7)*d3(15) + d1(4)*d3(8))
    d4(2) = 1.032795558988645d0*d1(1)*d3(2) - 0.6324555320336759d0*(d1(7)*d3(16) + d1(4)*d3(9))
    d4(3) = -0.6324555320336759d0*(d1(4)*d3(10) + d1(7)*d3(17)) + 1.032795558988645d0*d1(1)*d3(3)
    d4(4) = -0.7071067811865475d0*(d1(4)*d3(11) + d1(7)*d3(18)) + 1.154700538379252d0*d1(1)*d3(4)
    d4(5) = -0.7071067811865475d0*(d1(4)*d3(12) + d1(7)*d3(19)) + 1.154700538379252d0*d1(1)*d3(5)
    d4(6) = 0.3779644730092272d0*(-2.449489742783178d0*(d1(4)*d3(13) + d1(7)*d3(20)) + 4.d0*d1(1)*d3(6))
    d4(7) = 0.3779644730092272d0*(-2.449489742783178d0*(d1(4)*d3(14) + d1(7)*d3(21)) + 4.d0*d1(1)*d3(7))
    d4(8) = 0.3273268353539886d0*(-d1(5)*d3(13) + d1(6)*d3(14) - d1(8)*d3(20) + d1(9)*d3(21)) +&
        0.5345224838248488d0*(d1(2)*d3(6) - d1(3)*d3(7))
    d4(9) = -0.3273268353539886d0*(d1(6)*d3(13) + d1(5)*d3(14) + d1(9)*d3(20) + d1(8)*d3(21)) +&
        0.5345224838248488d0*(d1(3)*d3(6) + d1(2)*d3(7))
    d4(10) = 0.125d0*(6.324555320336759d0*d1(4)*d3(1) - 2.449489742783178d0*(d1(4)*d3(22) + d1(7)*d3(29)) +&
        7.745966692414834d0*d1(1)*d3(8))
    d4(11) = 0.816496580927726d0*d1(4)*d3(2) - 0.3162277660168379d0*(d1(4)*d3(23) + d1(7)*d3(30)) + d1(1)*&
       d3(9)
    d4(12) = d1(1)*d3(10) + 0.816496580927726d0*d1(4)*d3(3) - 0.3162277660168379d0*(d1(4)*d3(24) + d1(7)*&
       d3(31))
    d4(13) = 1.118033988749895d0*d1(1)*d3(11) - 0.3535533905932738d0*(d1(4)*d3(25) + d1(7)*d3(32)) +&
        0.9128709291752769d0*d1(4)*d3(4)
    d4(14) = 1.118033988749895d0*d1(1)*d3(12) - 0.3535533905932738d0*(d1(4)*d3(26) + d1(7)*d3(33)) +&
        0.9128709291752769d0*d1(4)*d3(5)
    d4(15) = 1.4638501094228d0*d1(1)*d3(13) - 0.4629100498862757d0*(d1(4)*d3(27) + d1(7)*d3(34)) +&
        1.195228609334394d0*d1(4)*d3(6)
    d4(16) = 1.4638501094228d0*d1(1)*d3(14) - 0.4629100498862757d0*(d1(4)*d3(28) + d1(7)*d3(35)) +&
        1.195228609334394d0*d1(4)*d3(7)
    d4(17) = 0.09449111825230681d0*(5.477225575051661d0*(d1(2)*d3(13) - d1(3)*d3(14)) + 1.732050807568877d0*&
       (-d1(5)*d3(27) + d1(6)*d3(28) - d1(8)*d3(34) + d1(9)*d3(35)) + 4.472135954999579d0*(d1(5)*d3(6) - d1(6)*d3(7)))
    d4(18) = 0.09449111825230681d0*(5.477225575051661d0*(d1(3)*d3(13) + d1(2)*d3(14)) - 1.732050807568877d0*&
       (d1(6)*d3(27) + d1(5)*d3(28) + d1(9)*d3(34) + d1(8)*d3(35)) + 4.472135954999579d0*(d1(6)*d3(6) + d1(5)*d3(7)))
    d4(19) = 0.125d0*(6.324555320336759d0*d1(7)*d3(1) + 7.745966692414834d0*d1(1)*d3(15) +&
        2.449489742783178d0*d1(7)*d3(22) - 2.449489742783178d0*d1(4)*d3(29))
    d4(20) = d1(1)*d3(16) + 0.816496580927726d0*d1(7)*d3(2) + 0.3162277660168379d0*(d1(7)*d3(23) - d1(4)*d3(30))
    d4(21) = d1(1)*d3(17) + 0.816496580927726d0*d1(7)*d3(3) + 0.3162277660168379d0*(d1(7)*d3(24) - d1(4)*d3(31))
    d4(22) = 0.08333333333333333d0*(13.41640786499874d0*d1(1)*d3(18) + 1.414213562373095d0*(3.d0*d1(7)*&
       d3(25) - 3.d0*d1(4)*d3(32) + 7.745966692414834d0*d1(7)*d3(4)))
    d4(23) = 0.08333333333333333d0*(13.41640786499874d0*d1(1)*d3(19) + 1.414213562373095d0*(3.d0*d1(7)*&
       d3(26) - 3.d0*d1(4)*d3(33) + 7.745966692414834d0*d1(7)*d3(5)))
    d4(24) = 1.4638501094228d0*d1(1)*d3(20) + 0.4629100498862757d0*(d1(7)*d3(27) - d1(4)*d3(34)) +&
        1.195228609334394d0*d1(7)*d3(6)
    d4(25) = 1.4638501094228d0*d1(1)*d3(21) + 0.4629100498862757d0*(d1(7)*d3(28) - d1(4)*d3(35)) +&
        1.195228609334394d0*d1(7)*d3(7)
    d4(26) = 0.09449111825230681d0*(5.477225575051661d0*(d1(2)*d3(20) - d1(3)*d3(21)) +&
        1.732050807568877d0*(d1(8)*d3(27) - d1(9)*d3(28) - d1(5)*d3(34) + d1(6)*d3(35)) +&
        4.472135954999579d0*(d1(8)*d3(6) - d1(9)*d3(7)))
    d4(27) = 0.09449111825230681d0*(5.477225575051661d0*(d1(3)*d3(20) + d1(2)*d3(21)) +&
        1.732050807568877d0*(d1(9)*d3(27) + d1(8)*d3(28) - d1(6)*d3(34) - d1(5)*d3(35)) +&
        4.472135954999579d0*(d1(9)*d3(6) + d1(8)*d3(7)))
    d4(28) = 0.125d0*(6.928203230275509d0*d1(1)*d3(22) - 1.414213562373095d0*(d1(4)*d3(36) + d1(7)*&
       d3(43)) + 5.477225575051661d0*(-d1(7)*d3(15) + d1(4)*d3(8)))
    d4(29) = 0.8944271909999159d0*d1(1)*d3(23) - 0.1825741858350554d0*(d1(4)*d3(37) + d1(7)*d3(44)) +&
        0.7071067811865475d0*(-d1(7)*d3(16) + d1(4)*d3(9))
    d4(30) = 0.7071067811865475d0*(d1(4)*d3(10) - d1(7)*d3(17)) + 0.8944271909999159d0*d1(1)*&
       d3(24) - 0.1825741858350554d0*(d1(4)*d3(38) + d1(7)*d3(45))
    d4(31) = 0.7905694150420948d0*(d1(4)*d3(11) - d1(7)*d3(18)) + d1(1)*d3(25) - 0.2041241452319315d0*&
       (d1(4)*d3(39) + d1(7)*d3(46))
    d4(32) = 0.7905694150420948d0*(d1(4)*d3(12) - d1(7)*d3(19)) + d1(1)*d3(26) - 0.2041241452319315d0*&
       (d1(4)*d3(40) + d1(7)*d3(47))
    d4(33) = 1.035098339013531d0*(d1(4)*d3(13) - d1(7)*d3(20)) + 1.309307341415954d0*d1(1)*&
       d3(27) - 0.2672612419124244d0*(d1(4)*d3(41) + d1(7)*d3(48))
    d4(34) = 1.035098339013531d0*(d1(4)*d3(14) - d1(7)*d3(21)) + 1.309307341415954d0*d1(1)*&
       d3(28) - 0.2672612419124244d0*(d1(4)*d3(42) + d1(7)*d3(49))
    d4(35) = 0.09449111825230681d0*(3.872983346207417d0*(d1(5)*d3(13) - d1(6)*d3(14) - d1(8)*d3(20) +&
        d1(9)*d3(21)) + 4.898979485566356d0*(d1(2)*d3(27) - d1(3)*d3(28)) - d1(5)*d3(41) + d1(6)*d3(42) -&
        d1(8)*d3(48) + d1(9)*d3(49))
    d4(36) = 0.09449111825230681d0*(3.872983346207417d0*(d1(6)*d3(13) + d1(5)*d3(14) - d1(9)*&
       d3(20) - d1(8)*d3(21)) + 4.898979485566356d0*(d1(3)*d3(27) + d1(2)*d3(28)) - d1(6)*d3(41) -&
       d1(5)*d3(42) - d1(9)*d3(48) - d1(8)*d3(49))
    d4(37) = 0.125d0*(5.477225575051661d0*d1(4)*d3(15) + 6.928203230275509d0*d1(1)*d3(29) +&
        1.414213562373095d0*d1(7)*d3(36) - 1.414213562373095d0*d1(4)*d3(43) + 5.477225575051661d0*d1(7)*d3(8))
    d4(38) = 0.8944271909999159d0*d1(1)*d3(30) + 0.1825741858350554d0*(d1(7)*d3(37) - d1(4)*d3(44)) +&
        0.7071067811865475d0*(d1(4)*d3(16) + d1(7)*d3(9))
    d4(39) = 0.7071067811865475d0*(d1(7)*d3(10) + d1(4)*d3(17)) + 0.8944271909999159d0*d1(1)*d3(31) +&
        0.1825741858350554d0*(d1(7)*d3(38) - d1(4)*d3(45))
    d4(40) = 0.7905694150420948d0*(d1(7)*d3(11) + d1(4)*d3(18)) + d1(1)*d3(32) + 0.2041241452319315d0*&
       (d1(7)*d3(39) - d1(4)*d3(46))
    d4(41) = 0.7905694150420948d0*(d1(7)*d3(12) + d1(4)*d3(19)) + d1(1)*d3(33) + 0.2041241452319315d0*&
       (d1(7)*d3(40) - d1(4)*d3(47))
    d4(42) = 1.035098339013531d0*(d1(7)*d3(13) + d1(4)*d3(20)) + 1.309307341415954d0*d1(1)*d3(34) +&
        0.2672612419124244d0*(d1(7)*d3(41) - d1(4)*d3(48))
    d4(43) = 1.035098339013531d0*(d1(7)*d3(14) + d1(4)*d3(21)) + 1.309307341415954d0*d1(1)*d3(35) +&
        0.2672612419124244d0*(d1(7)*d3(42) - d1(4)*d3(49))
    d4(44) = 0.09449111825230681d0*(3.872983346207417d0*(d1(8)*d3(13) - d1(9)*d3(14) + d1(5)*&
       d3(20) - d1(6)*d3(21)) + 4.898979485566356d0*(d1(2)*d3(34) - d1(3)*d3(35)) + d1(8)*d3(41) - d1(9)*d3(42) -&
       d1(5)*d3(48) + d1(6)*d3(49))
    d4(45) = 0.09449111825230681d0*(3.872983346207417d0*(d1(9)*d3(13) + d1(8)*d3(14) + d1(6)*d3(20) +&
        d1(5)*d3(21)) + 4.898979485566356d0*(d1(3)*d3(34) + d1(2)*d3(35)) + d1(9)*d3(41) + d1(8)*d3(42) - d1(6)*&
       d3(48) - d1(5)*d3(49))
    d4(46) = 0.3307189138830738d0*(2.449489742783178d0*(d1(4)*d3(22) - d1(7)*d3(29)) + 2.d0*d1(1)*d3(36))
    d4(47) = 0.8366600265340755d0*(d1(4)*d3(23) - d1(7)*d3(30)) + 0.6831300510639732d0*d1(1)*d3(37)
    d4(48) = 0.8366600265340755d0*(d1(4)*d3(24) - d1(7)*d3(31)) + 0.6831300510639732d0*d1(1)*d3(38)
    d4(49) = 0.9354143466934853d0*(d1(4)*d3(25) - d1(7)*d3(32)) + 0.7637626158259733d0*d1(1)*d3(39)
    d4(50) = 0.9354143466934853d0*(d1(4)*d3(26) - d1(7)*d3(33)) + 0.7637626158259733d0*d1(1)*d3(40)
    d4(51) = 1.224744871391589d0*(d1(4)*d3(27) - d1(7)*d3(34)) + d1(1)*d3(41)
    d4(52) = 1.224744871391589d0*(d1(4)*d3(28) - d1(7)*d3(35)) + d1(1)*d3(42)
    d4(53) = 0.25d0*(1.732050807568877d0*(d1(5)*d3(27) - d1(6)*d3(28) - d1(8)*d3(34) + d1(9)*d3(35)) +&
        1.414213562373095d0*(d1(2)*d3(41) - d1(3)*d3(42)))
    d4(54) = 0.25d0*(1.732050807568877d0*(d1(6)*d3(27) + d1(5)*d3(28) - d1(9)*d3(34) - d1(8)*d3(35)) +&
        1.414213562373095d0*(d1(3)*d3(41) + d1(2)*d3(42)))
    d4(55) = 0.3307189138830738d0*(2.449489742783178d0*(d1(7)*d3(22) + d1(4)*d3(29)) + 2.d0*d1(1)*d3(43))
    d4(56) = 0.8366600265340755d0*(d1(7)*d3(23) + d1(4)*d3(30)) + 0.6831300510639732d0*d1(1)*d3(44)
    d4(57) = 0.8366600265340755d0*(d1(7)*d3(24) + d1(4)*d3(31)) + 0.6831300510639732d0*d1(1)*d3(45)
    d4(58) = 0.9354143466934853d0*(d1(7)*d3(25) + d1(4)*d3(32)) + 0.7637626158259733d0*d1(1)*d3(46)
    d4(59) = 0.9354143466934853d0*(d1(7)*d3(26) + d1(4)*d3(33)) + 0.7637626158259733d0*d1(1)*d3(47)
    d4(60) = 1.224744871391589d0*(d1(7)*d3(27) + d1(4)*d3(34)) + d1(1)*d3(48)
    d4(61) = 1.224744871391589d0*(d1(7)*d3(28) + d1(4)*d3(35)) + d1(1)*d3(49)
    d4(62) = 0.25d0*(1.732050807568877d0*(d1(8)*d3(27) - d1(9)*d3(28) + d1(5)*d3(34) - d1(6)*d3(35)) +&
        1.414213562373095d0*(d1(2)*d3(48) - d1(3)*d3(49)))
    d4(63) = 0.25d0*(1.732050807568877d0*(d1(9)*d3(27) + d1(8)*d3(28) + d1(6)*d3(34) + d1(5)*d3(35)) +&
        1.414213562373095d0*(d1(3)*d3(48) + d1(2)*d3(49)))
    d4(64) = 0.9354143466934853d0*(d1(4)*d3(36) - d1(7)*d3(43))
    d4(65) = 0.9660917830792959d0*(d1(4)*d3(37) - d1(7)*d3(44))
    d4(66) = 0.9660917830792959d0*(d1(4)*d3(38) - d1(7)*d3(45))
    d4(67) = 1.080123449734643d0*(d1(4)*d3(39) - d1(7)*d3(46))
    d4(68) = 1.080123449734643d0*(d1(4)*d3(40) - d1(7)*d3(47))
    d4(69) = 1.414213562373095d0*(d1(4)*d3(41) - d1(7)*d3(48))
    d4(70) = 1.414213562373095d0*(d1(4)*d3(42) - d1(7)*d3(49))
    d4(71) = 0.5d0*(d1(5)*d3(41) - d1(6)*d3(42) - d1(8)*d3(48) + d1(9)*d3(49))
    d4(72) = 0.5d0*(d1(6)*d3(41) + d1(5)*d3(42) - d1(9)*d3(48) - d1(8)*d3(49))
    d4(73) = 0.9354143466934853d0*(d1(7)*d3(36) + d1(4)*d3(43))
    d4(74) = 0.9660917830792959d0*(d1(7)*d3(37) + d1(4)*d3(44))
    d4(75) = 0.9660917830792959d0*(d1(7)*d3(38) + d1(4)*d3(45))
    d4(76) = 1.080123449734643d0*(d1(7)*d3(39) + d1(4)*d3(46))
    d4(77) = 1.080123449734643d0*(d1(7)*d3(40) + d1(4)*d3(47))
    d4(78) = 1.414213562373095d0*(d1(7)*d3(41) + d1(4)*d3(48))
    d4(79) = 1.414213562373095d0*(d1(7)*d3(42) + d1(4)*d3(49))
    d4(80) = 0.5d0*(d1(8)*d3(41) - d1(9)*d3(42) + d1(5)*d3(48) - d1(6)*d3(49))
    d4(81) = 0.5d0*(d1(9)*d3(41) + d1(8)*d3(42) + d1(6)*d3(48) + d1(5)*d3(49))
      return
  end subroutine mp_rot_form_d
